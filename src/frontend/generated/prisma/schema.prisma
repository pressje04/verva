// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Interview {
  id           String   @id @default(uuid()) //id for our db
  title        String //What's the interview called? Company perhaps
  role         String //What position is it for? IOS dev? SWE intern?
  type         String //Behavioral? Technical? Maybe more specific like system design or architecture
  difficulty   String //Easy, hard, maybe type of interview experience so your 
  //ready for both
  timeEstimate String //15 min, 1 hr, not strictly enforced but recommended
  description  String
  tags         String[] //identifiers used to filter relevant interviews
  createdAt    DateTime @default(now())
}

// NEXT AUTH USER AUTHENTICATION MODELS   
model User {
  id       String @id @default(cuid())
  username String @unique
  fullName String
  email    String @unique
  password String

  // NextAuth
  accounts          Account[]
  sessions          Session[]
  interviewSessions InterviewSession[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id])
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// INTERVIEW MODELS

model InterviewSession {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  title       String // e.g. “Software Engineer at Netflix”
  description String // Job description or custom instructions

  settings Json // JSON blob of selected AI config (difficulty, tone, etc.)

  messages Message[] // All Q&A exchanges
  status   String    @default("active") // active | complete | abandoned

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String           @id @default(cuid())
  session   InterviewSession @relation(fields: [sessionId], references: [id])
  sessionId String

  role      String // "user" | "ai"
  content   String
  timestamp DateTime @default(now())
}
