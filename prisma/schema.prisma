// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../src/frontend/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ---------------- Enums ---------------- */

enum MsgRole {
  user
  ai
}

enum InterviewKind {
  behavioral
  technical
  leadership
}

enum Difficulty {
  easy
  medium
  hard
}

/* ---------------- Existing Models ---------------- */

model Interview {
  id           String   @id @default(uuid())
  title        String
  role         String         // position title (e.g., "SWE Intern")
  type         String         // template type label if you use templates
  difficulty   String
  timeEstimate String
  description  String
  tags         String[]
  createdAt    DateTime @default(now())

  // (optional) sessions created from this template
  interviewSessions InterviewSession[]
}

/* -------------- NextAuth Models -------------- */

model User {
  id       String  @id @default(cuid())
  username String  @unique
  fullName String
  email    String  @unique
  password String
  resumeUrl String?
  skills   Skill[]

  accounts          Account[]
  sessions          Session[]
  interviewSessions InterviewSession[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  user               User    @relation(fields: [userId], references: [id])
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  @@unique([provider, providerAccountId])
}

model Skill {
  id     String @id @default(cuid())
  name   String
  level  String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/* -------------- Interview Flow -------------- */

model InterviewSession {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String

  // Explicit, queryable session metadata (for modal/config + filtering)
  company       String?                // e.g., "Amazon"
  jobRole       String?                // e.g., "SWE Intern"
  interviewKind InterviewKind?         // behavioral | technical | leadership
  difficulty    Difficulty?            // normalized difficulty
  language      String?                // e.g., "English" or "en"

  // Optional linkage to an Interview template
  interviewId   String?
  interview     Interview? @relation(fields: [interviewId], references: [id])

  title         String                 // e.g., “Software Engineer at Netflix”
  description   String                 // JD or custom instructions

  settings      Json                   // full config blob, keep for long-tail knobs
  messages      Message[]
  status        String     @default("active") // active | complete | abandoned

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([userId, createdAt])
  @@index([company])
  @@index([interviewKind])
}

model Message {
  id           String   @id @default(cuid())
  session      InterviewSession @relation(fields: [sessionId], references: [id])
  sessionId    String

  role         String         // enum (safer than free text) ***CHANGE BACK TO ENUM IN PROD!!!
  content      String            // full rendered bubble text (kept for backward compat)

  // Structured fields for AI turns (great for topic control + UI)
  topic         String?          // e.g., "DSA", "Teamwork", "Customer Obsession"
  question      String?          // the actual question asked
  briefFeedback String?          // short feedback about the last user answer
  turn          Int?             // optional: 1,2,3... for sequencing

  type         String   @default("text") // "text" | "audio" | "video"
  mediaUrl     String?
  transcript   String?

  timestamp    DateTime @default(now())

  @@index([sessionId, timestamp])
}
